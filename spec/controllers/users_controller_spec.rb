require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe UsersController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # User. As you add validations to User, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {email:'nilayannad@gmail.com', password:'12345678', first_name: 'Nilay', last_name: 'Anand'}
  }

  let(:invalid_attributes) {
    {email: 'abc'}
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # UsersController. Be sure to keep this updated too.
  let(:valid_session) { {} }


  describe "POST #create" do
    context "signup with valid params" do

      before do
        post :create, params: {user: valid_attributes}
      end

      it "responds with 200" do
        expect(response.status).to eq(200)
      end

      it "create entry in User table" do
        expect(User.last.email).to eq(valid_attributes[:email])
        expect(User.last.first_name).to eq(valid_attributes[:first_name])
        expect(User.last.last_name).to eq(valid_attributes[:last_name])
      end

      it "has basic info about user" do
        expect(response_body['data']['user']).to include_json(
           first_name: valid_attributes[:first_name],
           last_name: valid_attributes[:last_name],
           email: valid_attributes[:email]
        )
      end

      it "has auth token" do
        expect(response_body['data']).to include_json(
                                             auth_token: /^[\w\.\-\s]+$/
                                         )
      end

      it "disallow signup with duplicate email" do
        # try to create user with same email
        post :create, params: {user: valid_attributes}
        expect(response_body).to include_json(
                                                     success: false,
                                                     error: "Email has already been taken",
                                                     status_code: 422
                                                 )
      end

    end

    context "with invalid params" do
      before do
        post :create, params: {user: invalid_attributes}
      end

      it "fails if mandatory params are missings" do
        expect(response.status).to eq(422)
        expect(response_body['success']).to eq false
        expect(response_body['status_code']).to eq 422
      end

    end
  end

  def response_body
    JSON.parse(response.body)
  end

end
